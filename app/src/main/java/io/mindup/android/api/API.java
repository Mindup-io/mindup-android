package io.mindup.android.api;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;

import javax.net.ssl.HttpsURLConnection;

/**
 * An abstract class defining API statics and shared services
 * Created by math on 02/12/15.
 */
public abstract class API {

    /*
    * http://stackoverflow.com/a/5626208/1871890
    * UUID for the current android device. As with all UUIDs,
    * this unique ID is "very highly likely" to be unique across all Android
    * devices. Much more so than ANDROID_ID is.
    *
    * The UUID is generated by using ANDROID_ID as the base key if appropriate,
    * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to
    * be incorrect, and finally falling back on a random UUID that's persisted
    * to SharedPreferences if getDeviceID() does not return a usable value.
    *
    * In some rare circumstances, this ID may change. In particular, if the
    * device is factory reset a new device ID may be generated. In addition, if
    * a user upgrades their phone from certain buggy implementations of Android
    * 2.2 to a newer, non-buggy version of Android, the device ID may change.
    * Or, if a user uninstalls your app on a device that has neither a proper
    * Android ID nor a Device ID, this ID may change on reinstallation.
    *
    * Note that if the code falls back on using TelephonyManager.getDeviceId(),
    * the resulting ID will NOT change after a factory reset. Something to be
    * aware of.
    *
    * Works around a bug in Android 2.2 for many devices when using ANDROID_ID
    * directly.
    *
    * This has to be set before doing API calls.
    */
    protected static String USER_ID;

    /**
     * Mindup's API base URL
     * TODO: Can we have some sort of randomness here ? e.g api[0-n].mindup.io/v2
     */
    protected static String API_URL = "https://api0.mindup.io/v2";

    /**
     * Store the last consumed URL.
     * Mainly used for testing / debug
     */
    protected String lastRequest;

    /**
     * Inline initialization a Google.Gson object with the Mongodb date format.
     * Gson is a library used to transform JSON from Mindup API to POJO
     */
    protected Gson gson = new GsonBuilder()
            .setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").create();


    /**
     * Convenient method to check if an integer is null or
     * equal to -1.
     *
     * @param integer
     * @return true|false
     */
    protected boolean isIntegerDefined(Integer integer){
        if(integer != null && integer != -1){

            return true;
        }
        return false;
    }

    /**
     * Convenient method to check if an object is null
     *
     * @param object
     * @return
     */
    protected boolean isObjectDefined(Object object){
        if(object != null){

            return true;
        }
        return false;
    }

    /**
     * Gets the last consumed URL.
     *
     * @return  last consumed URL.
     */
    public String getLastRequest(){
        return this.lastRequest;
    }

    /**
     * Opens a connection to stringUrl, reads and returns the served json.
     * The http request is a get
     *
     * @param stringUrl
     * @return A string containing JSON
     * @throws IOException
     */
    protected String getJson(String stringUrl) throws IOException {

        String response = readHttpResponse(openHttpGetConnection(stringUrl));

        /**
         * If we made it this far (no IOException raised) it means the call was successful.
         * Therefore, we update the lastRequest value.
         * Even if the call is successful (i.e http 20x), the response could be null.
         */
        this.lastRequest = stringUrl;

        return response;
    }

    /**
     * Opens a connection to stringUrl, reads and returns the served json.
     * The http request is a post
     *
     * @param stringUrl
     * @param postData
     * @return String - the post response
     * @throws IOException
     */
    protected String postJson(String stringUrl, String postData) throws IOException{

        String response = readHttpResponse(openHttpPostConnection(stringUrl, postData));

        /**
         * If we made it this far (no IOException raised) it means the call was successful.
         * Therefore, we update the lastRequest value.
         * Even if the call is successful (i.e http 20x), the response could be null.
         */
        this.lastRequest = stringUrl;

        return response;
    }

    /**
     * Reads the response from an https call
     * @param httpsURLConnection
     * @return String - http response
     * @throws IOException
     */
    private String readHttpResponse(HttpsURLConnection httpsURLConnection) throws IOException{

        BufferedReader in = new BufferedReader(
                // Json encoding is UTF-8
                new InputStreamReader(httpsURLConnection.getInputStream(), "UTF-8")
        );

        // The JSON's answer is outputed in one line
        String response = in.readLine();

        // Close everything
        in.close();
        httpsURLConnection.disconnect();

        return response;
    }

    /**
     * Opens a http get connection
     *
     * @param stringUrl
     * @return HttpsURLConnection configured for get calls
     * @throws IOException
     */
    private HttpsURLConnection openHttpGetConnection(String stringUrl) throws IOException{

        URL url = new URL(stringUrl);

        HttpsURLConnection httpsURLConnection = (HttpsURLConnection) url.openConnection();
        /**
         * For some reasons, the default user-agent of Android (which is java.*)
         * is always rejected by the API server (403 errors).
         */
        httpsURLConnection.setRequestProperty("User-Agent", "Mozilla/5.0");

        return httpsURLConnection;
    }

    /**
     * Opens a http post connection and post data
     *
     * @param stringUrl
     * @param data
     * @return HttpsURLConnection configured for post
     * @throws IOException
     */
    private HttpsURLConnection openHttpPostConnection(String stringUrl, String data) throws IOException{

        /**
         * Get connection are default connection, so we can start from there
         * and update with remaining specificities for post.
         */
        HttpsURLConnection httpsURLConnection = openHttpGetConnection(stringUrl);

        //http://stackoverflow.com/a/2026299/1871890
        httpsURLConnection.setRequestMethod("POST");
        httpsURLConnection.setDoOutput(true);
        httpsURLConnection.setRequestProperty("Content-type", "application/json");
        httpsURLConnection.setRequestProperty("Accept", "*/*");

        //write the post data
        OutputStreamWriter out = new OutputStreamWriter(httpsURLConnection.getOutputStream());
        out.write(data);
        out.flush();
        out.close();

        return httpsURLConnection;
    }


}